/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ExtendibleHashingPackage;

import java.awt.Graphics;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sanjay Verma
 */
class Block {
	int ld;
	Vector<Integer>v = new Vector<>();
	public Block() {
		ld = 1;
	}
}
public class MainFrame extends javax.swing.JFrame {
    static Vector<Integer>va = new Vector<>();
      static int a,b;
    DefaultTableModel dtm;
    static DefaultTableModel ltb;
    static DefaultTableModel rtb;
    static Map <Integer, Block > dir = new HashMap<Integer, Block >();
	static int gd = 2;
        static int bfr;
	static int ind = 2;
	static int[] create = new int[100];
        //rtb.setColumnCount(bfr+1);

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        dtm = new DefaultTableModel(0, 0);
        ltb=new DefaultTableModel(0,0);
        rtb=new DefaultTableModel(0,0);
        
        String lefttableheader[]=new String[]{"Directory No.","Bucket No. it points"};
        String header[] = new String[] { "Keys", "Key Mod 17", "Hash Value"
             };       
        
        dtm.setColumnIdentifiers(header);
        ltb.setColumnIdentifiers(lefttableheader);        
       InsertTable.setModel(dtm);
       jTable1.setModel(ltb);
       jTable2.setModel(rtb);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        bfrTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        InsertButton = new javax.swing.JButton();
        DisplayButton = new javax.swing.JButton();
        SearchButton = new javax.swing.JButton();
        ExitButton = new javax.swing.JButton();
        InsertTextField = new javax.swing.JTextField();
        SearchTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        InsertTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        RefreshButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel2.setBackground(new java.awt.Color(204, 204, 204));
        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Extendible Hashing");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(421, 421, 421))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(51, 153, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));

        bfrTextField.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        bfrTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bfrTextFieldActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Please Enter Blocking factor :");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bfrTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bfrTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        InsertButton.setBackground(new java.awt.Color(255, 51, 51));
        InsertButton.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        InsertButton.setForeground(new java.awt.Color(255, 255, 255));
        InsertButton.setText("Insert");
        InsertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertButtonActionPerformed(evt);
            }
        });

        DisplayButton.setBackground(new java.awt.Color(255, 51, 51));
        DisplayButton.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        DisplayButton.setForeground(new java.awt.Color(255, 255, 255));
        DisplayButton.setText("Display");
        DisplayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisplayButtonActionPerformed(evt);
            }
        });

        SearchButton.setBackground(new java.awt.Color(255, 51, 51));
        SearchButton.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        SearchButton.setForeground(new java.awt.Color(255, 255, 255));
        SearchButton.setText("Search");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        ExitButton.setBackground(new java.awt.Color(255, 51, 51));
        ExitButton.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        ExitButton.setForeground(new java.awt.Color(255, 255, 255));
        ExitButton.setText("Exit");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });

        InsertTextField.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        InsertTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertTextFieldActionPerformed(evt);
            }
        });

        SearchTextField.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        SearchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchTextFieldActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel3.setText("Enter the value to insert :");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel4.setText("Enter the value to search :");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(InsertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(DisplayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(75, 75, 75)
                        .addComponent(SearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)
                        .addComponent(ExitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(143, 143, 143))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(InsertTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addGap(32, 32, 32)
                        .addComponent(SearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(64, 64, 64))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ExitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DisplayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(InsertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(InsertTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));

        jPanel10.setLayout(new java.awt.GridBagLayout());

        InsertTable.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        InsertTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        InsertTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Keys", "K Mod 10", "Hash Value"
            }
        ));
        InsertTable.setRowHeight(20);
        jScrollPane1.setViewportView(InsertTable);

        jTable1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTable1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Directory no.", "Bucket it points to"
            }
        ));
        jTable1.setRowHeight(30);
        jScrollPane2.setViewportView(jTable1);

        jTable2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTable2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Bucket No.", "Value:1", "Value:2", "Value:3"
            }
        ));
        jTable2.setRowHeight(30);
        jScrollPane3.setViewportView(jTable2);

        RefreshButton.setBackground(new java.awt.Color(255, 51, 51));
        RefreshButton.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        RefreshButton.setForeground(new java.awt.Color(255, 255, 255));
        RefreshButton.setText("Click to refresh");
        RefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(RefreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 682, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(84, 84, 84)))
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(RefreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 5, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
//boolean verify_phoneno(String s) 
//    { 
//        // The given argument to compile() method  
//        // is regular expression. With the help of  
//        // regular expression we can validate mobile 
//        // number.  
//        // 1) Begins with 0 or 91 
//        // 2) Then contains 7 or 8 or 9. 
//        // 3) Then contains 9 digits 
//        Pattern p = Pattern.compile("[0-9]"); 
//  
//        // Pattern class contains matcher() method 
//        // to find matching between given number  
//        // and regular expression 
//        Matcher m = p.matcher(s); 
//        return (m.find() && m.group().equals(s)); 
//    }
    private void InsertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertButtonActionPerformed
        // TODO add your handling code here:
      
        if(bfrTextField.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null,"Please Enter blocking factor");            
        }
//         else if(!verify_phoneno((bfrTextField).getText()))
//        {
//              JOptionPane.showMessageDialog(null, "Enter an integer Value");            
//        }
        else
        {
             try {
                     Integer.parseInt(bfrTextField.getText());
                     //System.out.println("An integer"):
                }
                catch (NumberFormatException e) {
                     JOptionPane.showMessageDialog(null, "Enter an integer Value for BFR");
                }
              
        
            if(!InsertTextField.getText().isEmpty())
            {
//                if(!verify_phoneno((InsertTextField).getText()))
//                {
//                    JOptionPane.showMessageDialog(null, "Enter an integer Value for insertion");
//                }
             try {
            int countv=0;
            int insertValue=Integer.parseInt(InsertTextField.getText());
            bfr=Integer.parseInt(bfrTextField.getText());
              if (!(va.isEmpty())) {
						Iterator value = va.iterator();
						while (value.hasNext())
                                                {
                                                    //System.out.print(value.next() + " ");
                                                   if((insertValue%17)==(Integer)(value.next()))
                                                   {
                                                       countv++;
                                                   }                                                   
                                                }
                                        }
            //jLabel3.setText(Integer.toString(insertValue));        
           if(countv==bfr)
           {
                JOptionPane.showMessageDialog(null, "Bucket overflow has occured! Please Enter a different value");
           }
           else{
            va.add(insertValue%17);
            insert(insertValue);
            addtotable(insertValue); 
             }
             }
            catch (NumberFormatException e) {
                     JOptionPane.showMessageDialog(null, "Enter an integer Value to insert");
                }
            }
            else
            {
            JOptionPane.showMessageDialog(null,"Please Enter no. to insert");            
            }            
        }
                         
        
    }//GEN-LAST:event_InsertButtonActionPerformed

    private void bfrTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bfrTextFieldActionPerformed
        // TODO add your handling code here:
        bfr=Integer.parseInt(bfrTextField.getText());
    }//GEN-LAST:event_bfrTextFieldActionPerformed

    private void DisplayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisplayButtonActionPerformed
        // TODO add your handling code here:
        rtb=new DefaultTableModel(0,0);        
        rtb.addColumn("Bucket No.");    
        rtb.addColumn("Local Depth");
        for(int i=1;i<=bfr;i++)
        {
            String s="Value";
            s=s+(Integer.toString(i));
            rtb.addColumn(s);
            //jTable2.getColumnModel().getColumn(i).setHeaderValue("Kshitij");
        }
        jTable2.setModel(rtb);
        jTable2.getTableHeader().repaint();     
        display();
    }//GEN-LAST:event_DisplayButtonActionPerformed

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
        // TODO add your handling code here:
        
        if(!SearchTextField.getText().isEmpty())
        {
//            if(!verify_phoneno((SearchTextField).getText()))
//                {
//                    JOptionPane.showMessageDialog(null, "Enter an integer Value");
//                }
            try{
            
            int searchvalue=Integer.parseInt(SearchTextField.getText());
            if(search(searchvalue)!=-1)
            {
            JOptionPane.showMessageDialog(null,"Number found");
            }
            else
            {
            JOptionPane.showMessageDialog(null,"Number not found");
            }
            }
           catch (NumberFormatException e) {
                     JOptionPane.showMessageDialog(null, "Enter an integer Value to search");
                }
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Please enter a number to search");            
        }
        
        
    }//GEN-LAST:event_SearchButtonActionPerformed

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_ExitButtonActionPerformed

    private void InsertTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InsertTextFieldActionPerformed

    private void RefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshButtonActionPerformed
        rtb=new DefaultTableModel(0,0);
        rtb.addColumn("Bucket No.");
        rtb.addColumn("Local Depth");
        for(int i=1;i<=bfr;i++)
        {
            String s="Value";
            s=s+(Integer.toString(i));
            rtb.addColumn(s);
            //jTable2.getColumnModel().getColumn(i).setHeaderValue("Kshitij");
        }
        jTable2.setModel(rtb);
        jTable2.getTableHeader().repaint();
        display();
    }//GEN-LAST:event_RefreshButtonActionPerformed

    private void SearchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchTextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {              
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });        
                dir.put(0, new Block());
		dir.put(1, new Block());
                dir.put(2, new Block());
                dir.put(3, new Block());
		create[0] = 0;
		create[1] = 1;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DisplayButton;
    private javax.swing.JButton ExitButton;
    private javax.swing.JButton InsertButton;
    private javax.swing.JTable InsertTable;
    private javax.swing.JTextField InsertTextField;
    private javax.swing.JButton RefreshButton;
    private javax.swing.JButton SearchButton;
    private javax.swing.JTextField SearchTextField;
    private javax.swing.JTextField bfrTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
public void addtotable(int neww)
    { 
        int binary[]=new int[]{0,0,0,0,0};
        int modvalue=neww%17;
        int t=modvalue;
        int c=4;
        String ans="";
        while(t>0)
        {
            binary[c]=t%2;
            t=t/2;
            c--;
        }
        while(c>=0)
        {
            binary[c]=0;
            c--;
        }
        ans=ans+Integer.toString(binary[0])+Integer.toString(binary[1])+Integer.toString(binary[2])+Integer.toString(binary[3])+Integer.toString(binary[4]);
        
        

        dtm.addRow(new Object[] { neww, modvalue, ans
                });    
    }

public static void insert(int n) {
		int h = (n % 17) & 1;
		int temp;
		do {
			temp = dir.get(h).ld;
			if (dir.get(h).ld > 1) {
				int k = 2;
				int x = 0;
				for (int j = 0; j < dir.get(h).ld; j++) {
					x += Math.pow(k, j);
				}
				h = (n % 17) & x;
			}
		} while (dir.get(h).ld != temp);
		if (dir.get(h).v.size() < bfr) {
			if (create[ind - 1] != h)
				create[ind++] = h;
			dir.get(h).v.add(n);
		} else {
			//cout<<"Heloo"<<endl;
			split(h, dir.get(h));
			insert(n);
		}
	}
public static void split(int sindex, Block sblock) {
		Block B = (new Block());
		Vector<Integer>temp = new Vector<>();
		if (!(sblock.v.isEmpty())) {
			Iterator value = sblock.v.iterator();
			while (value.hasNext()) {
				int i = (Integer)(value.next());
				temp.add(i);
			}
		}
		sblock.v.removeAllElements();

		if (sblock.ld == gd) {
			dir.put((sindex ^ (1 << gd)), B);
			if (gd != 0) {
				for (int i = 0; i < (1 << gd); ++i) {
					if (i != sindex)
						dir.put((i ^ (1 << gd)), dir.get(i));
				}
			}
			gd++;
			B.ld = ++ sblock.ld;
			Iterator values = temp.iterator();
			while (values.hasNext()) {
				int i = (Integer)values.next();
				int h = ( i % 17) & 1;;
				int x = 0;
				if (dir.get(sindex).ld > 1) {
					int k = 2;
					for (int j = 0; j < dir.get(sindex).ld; j++) {
						x += Math.pow(k, j);
					}
					h = (i % 17) & x;
				}
				if (create[ind - 1] != h)
					create[ind++] = h;
				dir.get(h).v.add(i);
			}

		} else {
			int k = sindex & ((1 << (sblock.ld)) - 1);
			Vector<Integer>indices = new Vector<>();
			for (int i = 0; i < (1 << gd); ++i) {
				int last = i & (1 << (sblock.ld)) - 1;
				if (last == k)
					indices.add(i);
			}
			B.ld = ++sblock.ld;
			for (int i = indices.size() / 2; i < indices.size(); ++i) {
				dir.put(indices.get(i), B);
			}
			Iterator values = temp.iterator();
			while (values.hasNext()) {
				int i = (Integer)values.next();
				int h = ( i % 17) & 1;;
				//int h =(i%10)&1;
				int x = 0;
				if (dir.get(sindex).ld > 1) {
					k = 2;
					for (int j = 0; j < dir.get(sindex).ld; j++) {
						x += Math.pow(k, j);
					}
					h = (i % 17) & x;
				}
				if (create[ind - 1] != h)
					create[ind++] = h;
				dir.get(h).v.add(i);
			}
		}
	}
public static void display() {
                
                ltb.setRowCount(0);
//		System.out.println("Global depth of the directory is : " + gd);
//		System.out.println("Global buckets are :");
//		for (int i = 0; i < (1 << gd); ++i) {
//			System.out.print(i + ",");
//		}                
//		System.out.print("\n");
                int gg;
		for (int i = 0; i < (1 << gd); ++i) 
		{                    
			int x=0,k=2;
			for(int j=0;j<dir.get(i).ld;j++)
			{
				x=(int)(x+Math.pow(k,j));	
			}                        
			gg=i & x;
//                        System.out.println(i+" "+gg);
                        ltb.addRow(new Object[] { i, gg}); 
		}
		for (int i = 0; i < (1 << gd); ++i) {
			for (int j = 0; j < ind; j++) {
				if (i == create[j]) {
//					System.out.println("Local depth of the bucket " + i + " is : " + dir.get(i).ld);
                                        Vector row=new Vector();
                                        row.add(i);
                                        row.add(dir.get(i).ld);
					if (!(dir.get(i).v.isEmpty())) {
						Iterator value = dir.get(i).v.iterator();
                                                int valuesarray[]=new int[bfr];                                        
                                                int k=0;
                                               
//                                                row.add(i);
//                                                row.add(dir.get(i).ld);
						while (value.hasNext())
                                                {
                                                    //System.out.print(value.next() + " ");
                                                    valuesarray[k]=(Integer)(value.next());
                                                    row.add(valuesarray[k]);
                                                    k++;                                                     
                                                }
                                        }
                                                rtb.addRow(row);							
//						System.out.print("\n");
						break;
//					} else {
//						System.out.println();
//					}
				}
			}

		}
                
	}
public static int search(int n) {
		int h = (n % 17) & 1;
		int temp;
		do {
			temp = dir.get(h).ld;
			if (dir.get(h).ld > 1) {
				int k = 2;
				int x = 0;
				for (int j = 0; j < dir.get(h).ld; j++) {
					x += Math.pow(k, j);
				}
				h = (n % 17) & x;
			}
		} while (dir.get(h).ld != temp);
		return (dir.get(h).v.indexOf(n));
	}
}
